//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WCFClientMEX.Service {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Boat", Namespace="http://schemas.datacontract.org/2004/07/WCFService")]
    [System.SerializableAttribute()]
    public partial class Boat : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double cornField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double corn {
            get {
                return this.cornField;
            }
            set {
                if ((this.cornField.Equals(value) != true)) {
                    this.cornField = value;
                    this.RaisePropertyChanged("corn");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="Service.IBoat")]
    public interface IBoat {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBoat/Sinn", ReplyAction="http://tempuri.org/IBoat/SinnResponse")]
        double Sinn(WCFClientMEX.Service.Boat par);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBoat/Sinn", ReplyAction="http://tempuri.org/IBoat/SinnResponse")]
        System.Threading.Tasks.Task<double> SinnAsync(WCFClientMEX.Service.Boat par);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IBoatChannel : WCFClientMEX.Service.IBoat, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class BoatClient : System.ServiceModel.ClientBase<WCFClientMEX.Service.IBoat>, WCFClientMEX.Service.IBoat {
        
        public BoatClient() {
        }
        
        public BoatClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public BoatClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public BoatClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public BoatClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public double Sinn(WCFClientMEX.Service.Boat par) {
            return base.Channel.Sinn(par);
        }
        
        public System.Threading.Tasks.Task<double> SinnAsync(WCFClientMEX.Service.Boat par) {
            return base.Channel.SinnAsync(par);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="Service.IServTP")]
    public interface IServTP {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServTP/GetSystemInfo", ReplyAction="http://tempuri.org/IServTP/GetSystemInfoResponse")]
        System.Data.DataTable GetSystemInfo(string param);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServTP/GetSystemInfo", ReplyAction="http://tempuri.org/IServTP/GetSystemInfoResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetSystemInfoAsync(string param);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServTPChannel : WCFClientMEX.Service.IServTP, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServTPClient : System.ServiceModel.ClientBase<WCFClientMEX.Service.IServTP>, WCFClientMEX.Service.IServTP {
        
        public ServTPClient() {
        }
        
        public ServTPClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ServTPClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServTPClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServTPClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Data.DataTable GetSystemInfo(string param) {
            return base.Channel.GetSystemInfo(param);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetSystemInfoAsync(string param) {
            return base.Channel.GetSystemInfoAsync(param);
        }
    }
}
